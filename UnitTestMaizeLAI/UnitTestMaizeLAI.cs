using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SiriusQualityMaizeLAI;
using System.Collections.Generic;

namespace UnitTestMaizeLAI
{
    [TestClass]
    public class UnitTestMaizeLAI
    {
        #region Instantiation

        private SiriusQualityMaizeLAI.Strategies.MaizeLAI maizeLAI_;
        private SiriusQualityMaizeLAI.MaizeLAIState maizeLaistate_;
        private SiriusQualityMaizeLAI.MaizeLeafState maizeLeafstate_;
        private SiriusQualityMaizeLAI.MaizeLeafState maizeLeafstate1_;

        #endregion

        #region Parameter values

        internal double Nfinal = 16.0;//leaf, genotypic
        //Leaf Expansion Rate
        double LERa = 4.25;//mm/°Cd, genotypic
        double LERb = -1.14999;//mm/°Cd/kPa, genotypic
        double LERc = 3.68999;//mm/°Cd/MPa, genotypic
        double Beta = 0.68;//Dimensionless
        double Sigma = 0.36;//Dimensionless

        //Width
        double width6 = 41.0;//mm
        double betaW = 0.41;//Dimensionless
        double sigmaW = 0.69;//Dimensionless
        double radBase = 0.15;//MJ
        double SensiRad = 34;//mm/MJ

        //Width thermal time
        double lagStopWidthExpand = 39.0;//°Cd

        //Tip thermal time
        double atip = 51.0;//°Cd/leaf
        double btip = -49.0;//°Cd
        double Dse = 33.0;//°Cd

        //Start elongation Thermal Time
        double k_bl = 0.708;//Dimensionless
        double Nlim = 6.0;//leaf

        //End elongation Thermal Time
        double Lagmax = 5.4;//°Cd/leaf
        double Nlast = 2.0;//leaf

        //ligulation thermal time
        double k_ll = 0.454;//dimensionless
        double alpha_tr = 0.52;//dimensionless
        double a_ll1 = 86.0;//°Cd/leaf
        double b_ll1 = 137.0;//°Cd

        //floral initiation Thermal Tima
        double leafNoInitEmerg = 6.59;//leaf
        double LIR = 0.068;//initiation/°Cd
        double ttinitflo = 28.8777;//°Cd;

        //Leaf Area Index
        double plantDensity = 7.5;//plant/m²
        double SLNcri = 1.0;//g(N)/m²(leaf)

        //Drought Stress Factors
        double UpperFPAWexp = 0.5;//Dimensionless
        double LowerFPAWexp = 0.1;//Dimensionless
        double UpperVPD = 45.0;//Dimensionless
        double LowerVPD = 15.0;//Dimensionless
        /********/
        //not used (parameter for senescence acceleration stress factor), no senescence implemented yet
        double MaxDSF = 4.5;
        double UpperFPAWsen = 0.4;
        double LowerFPAWsen = 0.1;
        /********/

        #endregion

        [TestMethod]
        public void TestMethod1()
        {
            #region Instantiation

            maizeLAI_ = new SiriusQualityMaizeLAI.Strategies.MaizeLAI();
            maizeLaistate_ = new SiriusQualityMaizeLAI.MaizeLAIState();
            maizeLeafstate_ = new SiriusQualityMaizeLAI.MaizeLeafState();
            maizeLeafstate1_ = new SiriusQualityMaizeLAI.MaizeLeafState();

            #endregion

            #region Load Parameters

            maizeLAI_.Nfinal = Nfinal;
            maizeLAI_.width6 = width6;
            maizeLAI_.betaW = betaW;
            maizeLAI_.sigmaW = sigmaW;
            maizeLAI_.Lagmax = Lagmax;
            maizeLAI_.Nlast = Nlast;
            maizeLAI_.leafNoInitEmerg = leafNoInitEmerg;
            maizeLAI_.LIR = LIR;
            maizeLAI_.LERa = LERa;
            maizeLAI_.LERb = LERb;
            maizeLAI_.LERc = LERc;
            maizeLAI_.Beta = Beta;
            maizeLAI_.Sigma = Sigma;
            maizeLAI_.b_ll1 = b_ll1;
            maizeLAI_.k_ll = k_ll;
            maizeLAI_.a_ll1 = a_ll1;
            maizeLAI_.Dse = Dse;
            maizeLAI_.alpha_tr = alpha_tr;
            maizeLAI_.atip = atip;
            maizeLAI_.k_bl = k_bl;
            maizeLAI_.Nlim = Nlim;
            maizeLAI_.btip = btip;
            maizeLAI_.lagStopWidthExpand = lagStopWidthExpand;
            maizeLAI_.plantDensity = plantDensity;
            maizeLAI_.SensiRad = SensiRad;
            maizeLAI_.radBase = radBase;
            maizeLAI_.LowerFPAWexp = LowerFPAWexp;
            maizeLAI_.UpperFPAWexp = UpperFPAWexp;
            maizeLAI_.MaxDSF = MaxDSF;
            maizeLAI_.LowerFPAWsen = LowerFPAWsen;
            maizeLAI_.UpperFPAWsen = UpperFPAWsen;
            maizeLAI_.UpperVPD = UpperVPD;
            maizeLAI_.LowerVPD = LowerVPD;
            maizeLAI_.SLNcri = SLNcri;
            maizeLAI_.ttinitflo = ttinitflo;

            #endregion

            #region Inputs

            double[] leafNumber = { 0.000000, 0.149066, 0.301517, 0.486634, 0.661334, 0.833802, 1.014566, 1.184957, 1.386866, 1.601455, 1.832994, 1.992932, 2.122847, 2.233103, 2.391807, 2.528132, 2.677376, 2.826441, 2.978893, 3.164010, 3.338710, 3.511178, 3.691941, 3.862333, 4.064241, 4.278831, 4.510369, 4.709519, 4.905682, 5.126451, 5.316751, 5.498432, 5.688563, 5.887793, 6.107627, 6.330192, 6.584082, 6.801453, 6.996408, 7.213484, 7.480407, 7.718710, 7.941465, 8.154608, 8.546778, 8.935667, 9.462056, 9.917652, 10.285328, 10.674577, 11.033548, 11.412350, 11.852065, 12.242343, 12.634010, 12.987093, 13.329861, 13.681661, 14.026106, 14.363087, 14.692469, 15.037024, 15.394989, 15.768755, 16.000000, 16.000000, 16.000000, 16.000000, 16.000000 };

            //double[] FPAW = {1.0000,1.0000,0.019398,0.000000,0.000000,0.080393,0.091455,0.097725,0.102768,0.107552,0.112232,0.116800,0.121091,0.125395,0.066759,0.057115,0.055080,0.000000,0.000000,0.000000,0.000000,0.026453,0.039808,0.046509,0.052068,0.056867,0.060747,0.064628,0.067750,0.071248,0.032387,0.044600,0.052634,0.057536,0.062020,0.016154,0.050619,0.057137,0.060953,0.041715,0.064206,0.084752,0.059245,0.095058,0.053049,0.096228,0.038793,0.093290,0.118694,0.016823,0.053736,0.002943,0.058459,0.000000,0.033443,0.086423,0.015629,0.069161,0.000000,0.015408,0.006586,0.069395,0.114805,0.029244,0.054585,0.001229,0.047978,0.000000,0.054310,0.108583,0.013360,0.037059,0.000000,0.000000,0.000000,0.000000,0.032356,0.000000,0.042165,0.000000,0.033072,0.005598,0.049090,0.047700,0.000000,0.004396,0.000000,0.017973,0.000000,0.043392,0.115063,0.040198,0.111738,0.086968,0.146105,0.077781,0.139595,0.205143,0.124850,0.193824,0.246936,0.287140,0.181382,0.223474,0.274677,0.196863,0.265012,0.311428,0.222403,0.254118,0.296151,0.142749,0.159745,0.207118,0.269340,0.321737,0.383241,0.437529,0.466894,0.489842,0.536309,0.575896,0.611989,0.644980,0.674761,0.680120,0.687174,0.702699,0.709038,0.738984,0.760720,0.780619,0.790327,0.805112,0.821339,0.836235,0.837221,0.838233};

            double[] FPAW = { 1.055291, 1.036655, 1.019249, 1.003766, 0.990614, 0.979833, 0.971251, 0.964426, 0.998909, 0.995291, 0.990670, 1.077249, 1.048768, 1.150430, 1.122151, 1.071810, 1.052505, 1.033515, 1.015676, 0.999554, 0.985769, 0.974301, 0.965302, 0.957673, 0.982768, 0.971598, 0.963499, 0.957750, 0.952470, 0.988235, 0.959482, 0.952849, 0.948322, 0.964150, 0.943932, 0.925046, 0.947035, 0.914049, 0.951536, 0.911216, 0.963843, 0.912173, 0.887144, 0.983750, 0.947740, 0.996658, 0.941717, 1.014961, 0.966557, 0.913577, 0.984371, 0.930839, 1.027778, 0.984592, 0.993414, 0.930605, 0.885195, 0.970756, 0.945415, 0.998771, 0.952022, 1.008564, 0.945690, 0.891417, 0.986640, 0.962941, 1.070087, 1.043824, 1.091356 };


            double[] VPDairCanopy = { 6.889954, 7.578266, 8.407633, 9.577369, 9.127844, 7.578550, 8.831484, 10.971215, 8.737927, 5.882144, 5.437460, 5.495472, 7.330120, 5.024862, 6.229059, 7.475600, 6.841527, 7.515523, 8.309527, 9.512993, 9.038382, 7.486887, 8.724538, 10.855646, 8.597306, 8.533481, 5.808266, 6.505992, 7.732205, 7.308155, 5.817618, 4.601725, 8.455746, 8.043546, 12.385766, 8.488644, 7.021340, 8.394602, 8.940320, 10.160783, 10.936832, 7.787378, 9.094345, 8.031715, 12.206500, 11.382078, 6.552908, 7.691687, 8.883592, 7.851757, 10.669495, 7.964305, 7.120225, 9.069677, 8.509248, 7.805493, 5.607642, 6.345150, 5.066041, 6.172752, 7.204273, 8.937706, 7.430357, 7.046565, 9.479713, 5.948851, 6.219275, 9.189522, 9.088173 };

            double[] deltaTTPhenoMaize = { 9.689264, 9.909361, 12.032583, 11.355507, 11.210422, 11.749631, 11.075431, 13.124064, 13.948326, 15.050000, 10.395995, 8.444444, 7.166667, 10.315789, 8.861111, 9.700819, 9.689264, 9.909361, 12.032583, 11.355507, 11.210422, 11.749631, 11.075431, 13.124064, 13.948326, 15.050000, 12.944715, 12.750586, 14.350000, 12.369528, 11.809273, 12.358458, 12.950000, 14.289178, 14.466766, 16.502824, 14.129089, 12.672070, 14.109971, 17.350000, 15.489670, 14.479119, 13.854293, 14.118100, 14.000000, 18.949999, 16.401456, 13.236359, 14.012953, 12.922965, 13.636850, 15.829760, 14.050000, 14.100000, 12.711007, 12.339632, 12.664820, 12.400001, 12.131312, 11.857771, 12.403959, 12.886743, 13.455577, 13.519285, 12.659389, 12.137639, 12.849999, 12.477453, 13.205576 };

            List<List<double>> TCanopyHourly = new List<List<double>>();

            #region Valorize

            TCanopyHourly.Add(new List<double> { 15.740179, 15.622564, 15.546427, 15.497140, 15.465234, 15.770195, 16.629604, 17.380379, 18.041825, 18.637626, 19.333302, 20.092454, 20.483007, 20.508734, 20.743017, 20.796191, 20.622620, 20.188599, 19.519554, 18.340781, 17.305959, 16.636130, 16.202542, 15.921868 });
            TCanopyHourly.Add(new List<double> { 17.483772, 17.353777, 17.269728, 17.215385, 17.180250, 17.535887, 18.500798, 19.353290, 20.109369, 20.789492, 21.553508, 22.370547, 22.798861, 22.842510, 23.075528, 23.108151, 22.895749, 22.405843, 21.668105, 20.371603, 19.220790, 18.476807, 17.995811, 17.684833 });
            TCanopyHourly.Add(new List<double> { 15.971373, 15.807386, 15.701485, 15.633096, 15.588930, 16.044292, 17.231043, 18.266060, 19.178076, 20.001547, 20.889044, 21.869276, 22.451520, 22.616927, 22.950067, 23.029946, 22.791852, 22.187042, 21.258499, 19.630920, 18.170486, 17.227477, 16.618538, 16.225309 });
            TCanopyHourly.Add(new List<double> { 14.850745, 14.649684, 14.519991, 14.436333, 14.382370, 14.987095, 16.521335, 17.902249, 19.139909, 20.250310, 21.352190, 22.516303, 23.201976, 23.379975, 23.668886, 23.647811, 23.263627, 22.479446, 21.343428, 19.357469, 17.556447, 16.394884, 15.645690, 15.162449 });
            TCanopyHourly.Add(new List<double> { 15.882465, 15.699975, 15.582392, 15.506630, 15.457814, 16.009019, 17.357388, 18.551624, 19.613518, 20.570461, 21.565899, 22.631463, 23.264543, 23.449547, 23.770251, 23.808928, 23.504767, 22.812797, 21.784016, 19.990261, 18.346504, 17.287539, 16.605275, 16.165693 });
            TCanopyHourly.Add(new List<double> { 16.450497, 16.314417, 16.226830, 16.170455, 16.134171, 16.539337, 17.493127, 18.314153, 19.033695, 19.687492, 20.457788, 21.288663, 21.757790, 21.882721, 22.191768, 22.289467, 22.115419, 21.622414, 20.857037, 19.526030, 18.293815, 17.500799, 16.990415, 16.661923 });
            TCanopyHourly.Add(new List<double> { 17.684126, 17.521760, 17.417364, 17.350239, 17.307080, 17.822412, 19.011066, 20.061667, 20.995568, 21.838825, 22.754203, 23.712250, 24.259315, 24.406052, 24.698905, 24.740356, 24.474906, 23.860840, 22.949295, 21.368407, 19.890440, 18.940284, 18.329409, 17.936652 });
            TCanopyHourly.Add(new List<double> { 16.928481, 16.707405, 16.565401, 16.474187, 16.415597, 17.147664, 18.799353, 20.277108, 21.599196, 22.789811, 23.980583, 25.222825, 25.985546, 26.248993, 26.595904, 26.601062, 26.200249, 25.346653, 24.107518, 21.964391, 19.941739, 18.642780, 17.808509, 17.272662 });
            TCanopyHourly.Add(new List<double> { 19.306972, 19.147713, 19.045513, 18.979928, 18.937841, 19.445015, 20.546620, 21.492820, 22.322533, 23.079352, 23.950193, 24.883363, 25.447664, 25.660350, 26.030496, 26.151910, 25.952547, 25.375259, 24.484451, 22.947724, 21.483846, 20.544585, 19.941892, 19.555149 });
            TCanopyHourly.Add(new List<double> { 17.455096, 17.383995, 17.338409, 17.309181, 17.290442, 17.565994, 18.172465, 18.749652, 19.280635, 19.749994, 20.144147, 20.740407, 21.063449, 21.024489, 20.777003, 20.674486, 20.467997, 20.163108, 19.768478, 19.085890, 18.429538, 18.008743, 17.738960, 17.565993 });
            TCanopyHourly.Add(new List<double> { 15.363927, 15.299031, 15.257458, 15.230827, 15.213768, 15.465075, 15.975434, 16.430700, 16.829425, 17.173827, 17.467196, 18.005652, 18.304790, 18.288846, 18.111438, 18.101600, 17.998533, 17.791079, 17.473258, 16.857285, 16.255644, 15.870252, 15.623377, 15.465233 });
            TCanopyHourly.Add(new List<double> { 13.309287, 13.235142, 13.187683, 13.157307, 13.137863, 13.431876, 14.030610, 14.577451, 15.065397, 15.490714, 15.851098, 16.433777, 16.764656, 16.754903, 16.560876, 16.517356, 16.366769, 16.102672, 15.723631, 15.020806, 14.330609, 13.888852, 13.606103, 13.425125 });
            TCanopyHourly.Add(new List<double> { 15.717323, 15.586011, 15.502027, 15.448312, 15.413957, 15.937263, 16.952467, 17.847622, 18.624585, 19.293216, 19.865176, 20.614324, 21.140277, 21.288606, 21.193618, 21.201342, 21.020609, 20.623679, 19.994161, 18.757648, 17.530415, 16.745582, 16.243649, 15.922634 });
            TCanopyHourly.Add(new List<double> { 16.066457, 16.012391, 15.977836, 15.955751, 15.941636, 16.160886, 16.583710, 16.960725, 17.290968, 17.576463, 17.820034, 18.332439, 18.584604, 18.535382, 18.358209, 18.350885, 18.265824, 18.093664, 17.829422, 17.321616, 16.814569, 16.490517, 16.283414, 16.151052 });
            TCanopyHourly.Add(new List<double> { 15.801838, 15.699897, 15.634789, 15.593205, 15.566646, 15.978647, 16.725792, 17.355789, 17.882584, 18.328145, 18.715103, 19.342906, 19.766399, 19.873354, 19.811712, 19.891543, 19.825669, 19.578452, 19.125304, 18.174656, 17.215315, 16.602643, 16.211354, 15.961448 });
            TCanopyHourly.Add(new List<double> { 14.566919, 14.415586, 14.318992, 14.257337, 14.217983, 14.833074, 15.915809, 16.809820, 17.543745, 18.159213, 18.698310, 19.456028, 20.049034, 20.311781, 20.370002, 20.535118, 20.483968, 20.154805, 19.503749, 18.098022, 16.669291, 15.757451, 15.175471, 14.804013 });
            TCanopyHourly.Add(new List<double> { 15.739187, 15.621824, 15.546956, 15.499195, 15.468727, 15.954273, 16.817589, 17.550508, 18.167355, 18.691227, 19.145926, 19.828394, 20.302194, 20.443692, 20.402180, 20.482868, 20.395242, 20.100616, 19.572788, 18.483592, 17.372446, 16.663683, 16.211570, 15.923165 });
            TCanopyHourly.Add(new List<double> { 17.480150, 17.350420, 17.267705, 17.214967, 17.181342, 17.725022, 18.691329, 19.522090, 20.228988, 20.832684, 21.354777, 22.087944, 22.601120, 22.762723, 22.722685, 22.786775, 22.664426, 22.317785, 21.722085, 20.519932, 19.288415, 18.503301, 18.002754, 17.683622 });
            TCanopyHourly.Add(new List<double> { 15.966208, 15.802538, 15.698234, 15.631761, 15.589399, 16.277774, 17.474801, 18.488683, 19.340743, 20.064495, 20.694184, 21.519945, 22.149192, 22.416352, 22.457124, 22.576540, 22.460641, 22.054379, 21.320447, 19.808285, 18.250841, 17.258436, 16.626036, 16.223032 });
            TCanopyHourly.Add(new List<double> { 14.844594, 14.643902, 14.516057, 14.434617, 14.382737, 15.244174, 16.781944, 18.138986, 19.319027, 20.337317, 21.211208, 22.205575, 22.954106, 23.258222, 23.252683, 23.265527, 22.989071, 22.381515, 21.418781, 19.563496, 17.649638, 16.430668, 15.654229, 15.159646 });
            TCanopyHourly.Add(new List<double> { 15.879295, 15.697120, 15.581113, 15.507242, 15.460200, 16.241563, 17.601947, 18.777969, 19.783819, 20.645652, 21.390838, 22.300295, 22.988054, 23.276490, 23.304186, 23.379572, 23.192337, 22.692419, 21.847843, 20.168764, 18.428340, 17.320230, 16.614660, 16.165383 });
            TCanopyHourly.Add(new List<double> { 16.451928, 16.316067, 16.229579, 16.174521, 16.139472, 16.718420, 17.690682, 18.500987, 19.172894, 19.740704, 20.238797, 20.971963, 21.505618, 21.710232, 21.738324, 21.871147, 21.808068, 21.497165, 20.902411, 19.654539, 18.354674, 17.527286, 17.000613, 16.665349 });
            TCanopyHourly.Add(new List<double> { 17.685395, 17.523273, 17.420095, 17.354430, 17.312639, 18.013157, 19.213513, 20.245379, 21.124099, 21.875918, 22.527892, 23.371111, 23.989611, 24.231853, 24.247856, 24.330412, 24.178909, 23.745969, 23.000862, 21.511044, 19.957781, 18.969395, 18.340415, 17.940136 });
            TCanopyHourly.Add(new List<double> { 16.930097, 16.709328, 16.568855, 16.479472, 16.422599, 17.385787, 19.055978, 20.518714, 21.783574, 22.873273, 23.812258, 24.870187, 25.682451, 26.045049, 26.093036, 26.138065, 25.864081, 25.219511, 24.173402, 22.144171, 20.026574, 18.679445, 17.822375, 17.277063 });
            TCanopyHourly.Add(new List<double> { 19.316938, 19.157881, 19.056690, 18.992312, 18.951355, 19.634624, 20.765564, 21.705051, 22.482286, 23.139057, 23.716977, 24.522038, 25.132434, 25.404634, 25.486616, 25.650801, 25.584850, 25.226522, 24.532593, 23.075443, 21.548790, 20.577695, 19.959944, 19.566952 });
            TCanopyHourly.Add(new List<double> { 17.563642, 17.404621, 17.303461, 17.239110, 17.198173, 17.889324, 19.061222, 20.066341, 20.920968, 21.652110, 22.287377, 23.121677, 23.728785, 23.964527, 23.984506, 24.072174, 23.929762, 23.509660, 22.780886, 21.322603, 19.795618, 18.824388, 18.206603, 17.813625 });
            TCanopyHourly.Add(new List<double> { 18.818072, 18.695790, 18.618005, 18.568525, 18.537049, 19.016857, 19.620343, 19.922417, 20.027595, 20.061516, 20.144372, 20.669185, 21.166501, 21.557813, 21.973734, 22.584569, 23.016849, 23.130502, 22.815442, 21.708677, 20.534470, 19.787589, 19.312506, 19.010304 });
            TCanopyHourly.Add(new List<double> { 20.240339, 20.110025, 20.027130, 19.974398, 19.940853, 20.451608, 21.095289, 21.418752, 21.533060, 21.571681, 21.662237, 22.201306, 22.727553, 23.156092, 23.612375, 24.261246, 24.719487, 24.838280, 24.500755, 23.320708, 22.069424, 21.273515, 20.767241, 20.445197 });
            TCanopyHourly.Add(new List<double> { 15.164615, 14.916099, 14.758003, 14.657427, 14.593444, 15.587006, 16.937549, 17.749679, 18.197073, 18.490702, 18.832774, 19.639244, 20.578003, 21.459398, 22.337796, 23.349676, 23.998196, 24.042574, 23.295880, 21.037919, 18.652190, 17.134669, 16.169345, 15.555264 });
            TCanopyHourly.Add(new List<double> { 14.648175, 14.405675, 14.251386, 14.153221, 14.090763, 15.054593, 16.356635, 17.124490, 17.532465, 17.791890, 18.105188, 18.889913, 19.810091, 20.679891, 21.555345, 22.571181, 23.232022, 23.297540, 22.580902, 20.376553, 18.050041, 16.569995, 15.628389, 15.029321 });
            TCanopyHourly.Add(new List<double> { 17.695315, 17.544972, 17.449300, 17.388419, 17.349676, 17.921234, 18.594890, 18.860000, 18.865867, 18.790478, 18.803610, 19.326390, 19.933969, 20.518757, 21.179827, 22.053131, 22.705310, 22.941038, 22.605905, 21.244121, 19.803169, 18.886282, 18.302840, 17.931572 });
            TCanopyHourly.Add(new List<double> { 19.997316, 19.919122, 19.869351, 19.837671, 19.817507, 20.094166, 20.336532, 20.303732, 20.106791, 19.876302, 19.736423, 20.104197, 20.452338, 20.756517, 21.163823, 21.815122, 22.350636, 22.631270, 22.545473, 21.841321, 21.092812, 20.616402, 20.313171, 20.120165 });
            TCanopyHourly.Add(new List<double> { 18.272363, 18.057850, 17.921272, 17.834315, 17.778950, 18.630155, 19.844189, 20.620873, 21.095567, 21.433801, 21.794467, 22.571082, 23.386317, 24.081173, 24.741187, 25.528998, 26.002877, 25.971263, 25.286420, 23.326202, 21.275306, 19.969692, 19.138485, 18.609289 });
            TCanopyHourly.Add(new List<double> { 18.561751, 18.351232, 18.217152, 18.131756, 18.077367, 18.889485, 19.980790, 20.583911, 20.862888, 21.015787, 21.232188, 21.929889, 22.741300, 23.508382, 24.302318, 25.260062, 25.909134, 26.026344, 25.437347, 23.515024, 21.505736, 20.226176, 19.411279, 18.892289 });
            TCanopyHourly.Add(new List<double> { 18.071497, 17.748695, 17.543023, 17.411978, 17.328483, 18.618468, 20.602801, 22.017637, 23.019008, 23.801871, 24.554397, 25.663784, 26.839605, 27.843507, 28.716790, 29.621725, 30.055218, 29.782229, 28.624721, 25.656092, 22.580609, 20.621464, 19.373335, 18.578139 });
            TCanopyHourly.Add(new List<double> { 17.445437, 17.204833, 17.051464, 16.953701, 16.891383, 17.812839, 19.109318, 19.873290, 20.277991, 20.533803, 20.842509, 21.621533, 22.534928, 23.398428, 24.267117, 25.278745, 25.938381, 26.006498, 25.296649, 23.088560, 20.801649, 19.344092, 18.415066, 17.822898 });
            TCanopyHourly.Add(new List<double> { 16.468434, 16.255898, 16.120353, 16.033908, 15.978778, 16.771160, 17.837124, 18.384403, 18.591134, 18.671971, 18.832499, 19.499577, 20.322557, 21.135287, 21.997312, 23.040085, 23.772035, 23.953006, 23.394345, 21.443592, 19.428594, 18.143670, 17.324258, 16.801694 });
            TCanopyHourly.Add(new List<double> { 17.624629, 17.392007, 17.243570, 17.148852, 17.088412, 17.963870, 19.233670, 19.993785, 20.407923, 20.675533, 20.988262, 21.756634, 22.640405, 23.459029, 24.272247, 25.229604, 25.847625, 25.898339, 25.204246, 23.058729, 20.859228, 19.455909, 18.560515, 17.989187 });
            TCanopyHourly.Add(new List<double> { 21.998539, 21.811963, 21.692837, 21.616776, 21.568213, 22.254412, 23.227416, 23.762593, 24.006004, 24.134672, 24.318583, 24.965744, 25.690618, 26.351980, 27.032222, 27.888243, 28.472544, 28.585283, 28.069759, 26.346986, 24.588159, 23.465316, 22.748450, 22.290760 });
            TCanopyHourly.Add(new List<double> { 18.231789, 17.961003, 17.788000, 17.677469, 17.606850, 18.616935, 20.192560, 21.226117, 21.879691, 22.353421, 22.840515, 23.741176, 24.748392, 25.651282, 26.495554, 27.443763, 27.998415, 27.925366, 27.043758, 24.527516, 21.982919, 20.357447, 19.319032, 18.655626 });
            TCanopyHourly.Add(new List<double> { 15.776970, 15.454053, 15.247599, 15.115604, 15.031213, 16.242540, 18.267639, 19.729336, 20.776495, 21.597257, 22.374429, 23.484572, 24.659614, 25.647221, 26.481916, 27.350957, 27.751254, 27.453296, 26.282818, 23.264908, 20.240879, 18.307836, 17.072081, 16.282054 });
            TCanopyHourly.Add(new List<double> { 17.688977, 17.470304, 17.330393, 17.240875, 17.183599, 17.956060, 19.107197, 19.741359, 20.029227, 20.178563, 20.389570, 21.079108, 21.916463, 22.722956, 23.550730, 24.554720, 25.242887, 25.380070, 24.781205, 22.744810, 20.704887, 19.399860, 18.564934, 18.030751 });
            TCanopyHourly.Add(new List<double> { 17.090206, 16.835403, 16.672247, 16.567772, 16.500874, 17.412196, 18.919829, 19.921104, 20.563927, 21.032273, 21.504572, 22.369601, 23.319873, 24.147568, 24.902908, 25.771980, 26.273234, 26.189911, 25.354174, 22.963723, 20.596049, 19.080176, 18.109597, 17.488136 });
            TCanopyHourly.Add(new List<double> { 18.962594, 18.790007, 18.679401, 18.608518, 18.563091, 19.183968, 20.300707, 21.129841, 21.742232, 22.229051, 22.679568, 23.436656, 24.097789, 24.520970, 24.818675, 25.234341, 25.400804, 25.204185, 24.558337, 22.927961, 21.331124, 20.307863, 19.652126, 19.231899 });
            TCanopyHourly.Add(new List<double> { 21.827011, 21.560010, 21.388749, 21.278896, 21.208433, 22.129389, 23.716398, 24.767540, 25.438285, 25.922764, 26.409855, 27.292844, 28.280786, 29.157253, 29.960386, 30.877437, 31.411230, 31.332674, 30.463719, 27.941709, 25.481715, 23.904089, 22.892257, 22.243275 });
            TCanopyHourly.Add(new List<double> { 18.878244, 18.593202, 18.410198, 18.292704, 18.217269, 19.193375, 20.978504, 22.242294, 23.123444, 23.798233, 24.439163, 25.419007, 26.463729, 27.337339, 28.077187, 28.895949, 29.305706, 29.092267, 28.090861, 25.382920, 22.768926, 21.090963, 20.013772, 19.322224 });
            TCanopyHourly.Add(new List<double> { 18.342624, 18.178004, 18.072211, 18.004222, 17.960529, 18.486949, 19.341381, 19.780273, 19.941074, 19.992108, 20.096747, 20.652311, 21.298819, 21.888071, 22.490977, 23.306821, 23.890504, 24.051994, 23.639843, 22.084890, 20.582850, 19.617644, 18.997383, 18.598782 });
            TCanopyHourly.Add(new List<double> { 18.072940, 17.862119, 17.726498, 17.639252, 17.583126, 18.247932, 19.389005, 20.021602, 20.308353, 20.449832, 20.641341, 21.289089, 22.091438, 22.857732, 23.627934, 24.594950, 25.265463, 25.410654, 24.848521, 22.847184, 20.933184, 19.702044, 18.910100, 18.400658 });
            TCanopyHourly.Add(new List<double> { 15.065425, 14.786351, 14.606632, 14.490897, 14.416365, 15.304904, 17.048591, 18.261012, 19.084413, 19.700317, 20.287330, 21.216572, 22.241712, 23.113578, 23.857337, 24.703987, 25.154716, 24.989776, 24.038351, 21.360218, 18.839723, 17.216800, 16.171751, 15.498789 });
            TCanopyHourly.Add(new List<double> { 17.403575, 17.182656, 17.040233, 16.948415, 16.889222, 17.558813, 18.822327, 19.583601, 19.994692, 20.245579, 20.522440, 21.217229, 22.049111, 22.810943, 23.536810, 24.445034, 25.044679, 25.115291, 24.481783, 22.365737, 20.381454, 19.102365, 18.277812, 17.746255 });
            TCanopyHourly.Add(new List<double> { 18.375044, 18.093811, 17.912300, 17.795150, 17.719540, 18.565901, 20.327998, 21.543360, 22.357812, 22.958323, 23.529683, 24.444947, 25.473096, 26.359454, 27.119415, 27.992570, 28.470263, 28.326118, 27.383028, 24.665221, 22.153161, 20.532108, 19.485957, 18.810792 });
            TCanopyHourly.Add(new List<double> { 19.153377, 18.986608, 18.878846, 18.809215, 18.764220, 19.260471, 20.392340, 21.253358, 21.902744, 22.419963, 22.884646, 23.617853, 24.264064, 24.653748, 24.874746, 25.230781, 25.350409, 25.130471, 24.492236, 22.866472, 21.385758, 20.429053, 19.810893, 19.411468 });
            TCanopyHourly.Add(new List<double> { 18.982927, 18.806083, 18.691674, 18.617658, 18.569773, 18.757988, 19.340798, 19.522464, 19.540041, 19.639517, 20.182199, 21.178353, 22.220545, 23.243916, 24.571655, 25.597866, 26.045969, 25.675207, 24.670433, 22.902379, 21.341607, 20.331966, 19.678820, 19.256282 });
            TCanopyHourly.Add(new List<double> { 14.508617, 14.217258, 14.028532, 13.906286, 13.827101, 14.295533, 15.752260, 16.717126, 17.434979, 18.163281, 19.214950, 20.768295, 22.267574, 23.573814, 25.079167, 26.104876, 26.341226, 25.524110, 23.864139, 20.936135, 18.380298, 16.724995, 15.652864, 14.958426 });
            TCanopyHourly.Add(new List<double> { 14.376380, 14.097028, 13.915850, 13.798343, 13.722131, 14.125070, 15.471119, 16.321116, 16.927159, 17.554594, 18.524663, 20.018500, 21.486848, 22.789098, 24.316009, 25.383842, 25.676973, 24.926177, 23.330554, 20.509257, 18.074302, 16.495270, 15.471235, 14.807105 });
            TCanopyHourly.Add(new List<double> { 15.858263, 15.621050, 15.467000, 15.366958, 15.301989, 15.585556, 16.631647, 17.215170, 17.581370, 17.988268, 18.767576, 20.055779, 21.347719, 22.524447, 23.969474, 25.024663, 25.389287, 24.806219, 23.447774, 21.040229, 18.986053, 17.652193, 16.786023, 16.223540 });
            TCanopyHourly.Add(new List<double> { 19.235124, 19.146634, 19.089090, 19.051671, 19.027337, 19.163305, 19.665598, 20.034658, 20.328840, 20.610615, 21.134773, 21.711525, 22.045182, 22.189508, 22.573503, 22.815045, 22.835305, 22.568523, 22.060567, 21.158243, 20.397170, 19.902279, 19.580469, 19.371204 });
            TCanopyHourly.Add(new List<double> { 16.517908, 16.330870, 16.209078, 16.129771, 16.078129, 16.203792, 16.855190, 17.065503, 17.084408, 17.174740, 17.689855, 18.728129, 19.833477, 20.903602, 22.311045, 23.412837, 23.912452, 23.556003, 22.479034, 20.562055, 18.964135, 17.923716, 17.246265, 16.805146 });
            TCanopyHourly.Add(new List<double> { 17.746157, 17.619418, 17.536775, 17.482886, 17.447747, 17.467378, 17.751246, 17.670928, 17.445252, 17.304243, 17.605448, 18.347176, 19.153881, 19.969693, 21.158170, 22.140016, 22.662611, 22.508978, 21.777189, 20.472007, 19.396800, 18.695730, 18.238598, 17.940522 });
            TCanopyHourly.Add(new List<double> { 17.003629, 16.822546, 16.704299, 16.627085, 16.576665, 16.640632, 17.207724, 17.309385, 17.211162, 17.193890, 17.622523, 18.622528, 19.733048, 20.838358, 22.316637, 23.504481, 24.088055, 23.800567, 22.751691, 20.877628, 19.352103, 18.356031, 17.705636, 17.280945 });
            TCanopyHourly.Add(new List<double> { 16.703958, 16.488628, 16.347818, 16.255737, 16.195523, 16.309631, 17.172252, 17.547306, 17.695197, 17.893401, 18.483522, 19.651625, 20.884651, 22.043746, 23.543169, 24.701557, 25.201372, 24.776117, 23.524910, 21.285642, 19.484548, 18.306875, 17.536802, 17.033244 });
            TCanopyHourly.Add(new List<double> { 16.145690, 15.882016, 15.709339, 15.596255, 15.522198, 15.733599, 17.114747, 18.020494, 18.671941, 19.308080, 20.212185, 21.628729, 22.975033, 24.096044, 25.474340, 26.438202, 26.698373, 26.017573, 24.480385, 21.725231, 19.535707, 18.101992, 17.163138, 16.548318 });
            TCanopyHourly.Add(new List<double> { 17.590304, 17.380910, 17.243576, 17.153505, 17.094430, 17.167878, 18.039848, 18.434872, 18.601063, 18.804884, 19.374735, 20.512253, 21.696380, 22.785658, 24.224065, 25.337628, 25.820168, 25.418646, 24.194111, 21.996267, 20.270430, 19.138633, 18.396375, 17.909573 });
            TCanopyHourly.Add(new List<double> { 16.592036, 16.382609, 16.245047, 16.154690, 16.095338, 16.151951, 17.051207, 17.476243, 17.669400, 17.892115, 18.463748, 19.602161, 20.775196, 21.837117, 23.250649, 24.342641, 24.811523, 24.410419, 23.181663, 20.973621, 19.260481, 18.135312, 17.396287, 16.910874 });
            TCanopyHourly.Add(new List<double> { 14.105483, 13.823542, 13.638067, 13.516052, 13.435784, 13.680114, 15.597539, 17.167770, 18.496984, 19.706761, 20.958446, 22.514019, 23.726413, 24.472589, 25.323891, 25.751394, 25.560536, 24.616514, 22.956438, 19.970487, 17.681556, 16.175959, 15.185570, 14.534066 });
            TCanopyHourly.Add(new List<double> { 18.942347, 18.819435, 18.738452, 18.685094, 18.649938, 18.665229, 19.237783, 19.540950, 19.706038, 19.876199, 20.312518, 21.060863, 21.690660, 22.139786, 22.920634, 23.516358, 23.759726, 23.517004, 22.791053, 21.484097, 20.494056, 19.841786, 19.412039, 19.128898 });
            TCanopyHourly.Add(new List<double> { 18.008552, 17.863451, 17.767700, 17.704514, 17.662817, 17.671108, 18.381197, 18.782263, 19.020344, 19.255643, 19.744398, 20.600383, 21.346768, 21.893645, 22.774789, 23.439031, 23.697412, 23.400985, 22.540910, 20.991559, 19.831850, 19.066611, 18.561651, 18.228437 });
            TCanopyHourly.Add(new List<double> { 15.860325, 15.596299, 15.421795, 15.306459, 15.230229, 15.296813, 16.924642, 18.131812, 19.079146, 19.947806, 20.943897, 22.388853, 23.632948, 24.545382, 25.618288, 26.327442, 26.400065, 25.656254, 24.087634, 21.256471, 19.162547, 17.778759, 16.864226, 16.259802 });
            TCanopyHourly.Add(new List<double> { 14.452169, 14.157867, 13.963042, 13.834071, 13.748693, 13.762852, 15.513301, 16.755391, 17.692591, 18.553734, 19.550595, 21.124810, 22.561386, 23.716893, 25.024312, 25.938414, 26.121671, 25.349852, 23.599347, 20.431196, 18.115606, 16.582904, 15.568346, 14.896749 });

            #endregion

            List<List<double>> VPDeq = new List<List<double>>();

            #region Valorize

            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.048167, 0.250310, 0.601050, 0.685504, 0.764255, 0.859517, 0.967673, 1.025070, 1.028893, 1.063958, 0.674561, 0.211850, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.049532, 0.264569, 0.650949, 0.758770, 0.859600, 0.977355, 1.108718, 1.179894, 1.187237, 1.226735, 0.761584, 0.235365, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.076732, 0.410551, 0.705797, 0.828902, 0.945437, 1.076989, 1.229766, 1.324369, 1.351781, 1.407729, 1.241528, 0.379927, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.071359, 0.392170, 0.797043, 0.962289, 1.120342, 1.286840, 1.473742, 1.589356, 1.620059, 1.670512, 1.246423, 0.372799, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.080441, 0.427451, 0.761723, 0.907914, 1.047079, 1.199661, 1.372241, 1.479488, 1.511511, 1.567768, 1.293673, 0.385343, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.075917, 0.371397, 0.647357, 0.744222, 0.835597, 0.947498, 1.073528, 1.147204, 1.167138, 1.217024, 0.966523, 0.288189, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.075574, 0.389169, 0.741591, 0.880643, 1.012332, 1.162148, 1.326916, 1.424791, 1.451522, 1.505491, 1.111461, 0.324919, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.098681, 0.535892, 0.892272, 1.093527, 1.287346, 1.493793, 1.723336, 1.871786, 1.924432, 1.994858, 1.718219, 0.493115, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.094731, 0.483731, 0.717087, 0.850097, 0.976640, 1.128642, 1.299408, 1.406768, 1.448053, 1.520997, 1.407650, 0.406401, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000222, 0.002656, 0.007743, 0.015131, 0.023640, 0.031510, 0.038900, 0.041194, 0.037079, 0.028825, 0.020039, 0.011181, 0.004206, 0.000388, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.004890, 0.053370, 0.148378, 0.279043, 0.422914, 0.551522, 0.673339, 0.709778, 0.640688, 0.503498, 0.355336, 0.201588, 0.076884, 0.006921, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.003959, 0.041723, 0.116226, 0.219751, 0.334858, 0.438460, 0.532708, 0.560625, 0.506148, 0.397548, 0.278620, 0.156723, 0.059092, 0.005073, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.013515, 0.152490, 0.452064, 0.762505, 0.853930, 0.934823, 1.044641, 1.124433, 1.147346, 1.132651, 1.133844, 0.724028, 0.268330, 0.021482, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.004516, 0.043445, 0.117612, 0.217871, 0.326743, 0.422699, 0.517565, 0.542062, 0.484443, 0.377937, 0.265519, 0.149695, 0.056294, 0.004476, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.015871, 0.159267, 0.448646, 0.637599, 0.695736, 0.747394, 0.833567, 0.893383, 0.908708, 0.899864, 0.911324, 0.660704, 0.246205, 0.018415, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.030284, 0.309071, 0.668504, 0.759485, 0.838679, 0.910282, 1.014563, 1.099228, 1.137619, 1.146200, 1.170685, 1.163080, 0.527222, 0.037390, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.019941, 0.192638, 0.544108, 0.701883, 0.771466, 0.833501, 0.929545, 0.998345, 1.019236, 1.013090, 1.025049, 0.805703, 0.296262, 0.020293, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.020918, 0.206007, 0.596046, 0.776237, 0.866129, 0.946259, 1.062632, 1.146832, 1.173824, 1.167115, 1.177863, 0.921711, 0.335039, 0.021832, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.032110, 0.315847, 0.735283, 0.851511, 0.954561, 1.047562, 1.174397, 1.274880, 1.318570, 1.325292, 1.345067, 1.325877, 0.536086, 0.033427, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.029503, 0.296589, 0.827790, 0.987145, 1.133133, 1.264982, 1.422714, 1.547076, 1.599026, 1.598072, 1.600286, 1.479771, 0.524794, 0.031046, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.033144, 0.322499, 0.792178, 0.932156, 1.058322, 1.172233, 1.317552, 1.432207, 1.481545, 1.486323, 1.499363, 1.467077, 0.551360, 0.031712, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.030934, 0.278538, 0.672144, 0.763406, 0.843178, 0.915208, 1.024823, 1.107369, 1.139649, 1.144109, 1.165287, 1.155214, 0.423396, 0.023996, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.031426, 0.296597, 0.768395, 0.900334, 1.018262, 1.124427, 1.267288, 1.376186, 1.419809, 1.422710, 1.437718, 1.377885, 0.489456, 0.026489, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.039965, 0.397459, 0.927991, 1.122744, 1.301397, 1.463818, 1.656657, 1.812091, 1.883613, 1.893179, 1.902179, 1.847755, 0.724983, 0.037469, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.038355, 0.361044, 0.750554, 0.876389, 0.986840, 1.087248, 1.232296, 1.346405, 1.398468, 1.414294, 1.446192, 1.433351, 0.613592, 0.031524, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.032412, 0.295331, 0.752516, 0.879522, 0.992904, 1.095078, 1.234610, 1.340078, 1.381946, 1.385519, 1.401240, 1.333495, 0.471002, 0.023654, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.019353, 0.159468, 0.409427, 0.519247, 0.524162, 0.536213, 0.613840, 0.689452, 0.750381, 0.816556, 0.916437, 0.682292, 0.259293, 0.013386, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.022800, 0.188531, 0.485408, 0.579370, 0.585439, 0.599727, 0.686254, 0.773150, 0.845723, 0.924820, 1.040618, 0.823465, 0.312580, 0.015869, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.032641, 0.314117, 0.620523, 0.678472, 0.717285, 0.763298, 0.875254, 1.011901, 1.146645, 1.287403, 1.457897, 1.572050, 0.704355, 0.034291, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.031346, 0.298423, 0.587120, 0.638114, 0.671142, 0.711666, 0.816294, 0.944836, 1.072381, 1.206931, 1.371152, 1.482836, 0.662811, 0.032104, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.026381, 0.218070, 0.488636, 0.489427, 0.479186, 0.480961, 0.552858, 0.639029, 0.724691, 0.824836, 0.962688, 1.017522, 0.392133, 0.019564, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.018961, 0.138063, 0.319488, 0.375990, 0.342650, 0.322618, 0.375604, 0.426742, 0.472216, 0.534285, 0.636395, 0.481406, 0.190388, 0.009831, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.030174, 0.282866, 0.696483, 0.768417, 0.820800, 0.877713, 1.004050, 1.142384, 1.265072, 1.385815, 1.535475, 1.563773, 0.579154, 0.028107, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.034650, 0.316886, 0.657721, 0.699686, 0.722951, 0.756212, 0.866127, 0.999203, 1.130375, 1.271829, 1.450460, 1.576667, 0.657186, 0.032545, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.042098, 0.453075, 0.967677, 1.133503, 1.269393, 1.405386, 1.615853, 1.852491, 2.066115, 2.261010, 2.472227, 2.576853, 1.127010, 0.054377, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.035657, 0.344048, 0.683291, 0.742081, 0.779909, 0.826262, 0.946720, 1.094490, 1.240924, 1.395110, 1.583713, 1.712133, 0.768640, 0.038884, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.031683, 0.294437, 0.569474, 0.597013, 0.607863, 0.629560, 0.721810, 0.840327, 0.962653, 1.098359, 1.271062, 1.398099, 0.634869, 0.033192, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.033022, 0.323180, 0.679649, 0.740219, 0.780083, 0.827405, 0.947113, 1.091006, 1.230439, 1.375028, 1.553306, 1.673190, 0.720305, 0.038098, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.034346, 0.318450, 0.743997, 0.787304, 0.810417, 0.843730, 0.963550, 1.102632, 1.234154, 1.374176, 1.557436, 1.682793, 0.641165, 0.035317, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.035833, 0.380351, 0.810381, 0.913183, 0.989966, 1.070957, 1.226324, 1.408996, 1.581092, 1.749447, 1.947429, 2.067755, 0.921805, 0.050915, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.032215, 0.375536, 0.850967, 1.004581, 1.131183, 1.256289, 1.444185, 1.655386, 1.843180, 2.009549, 2.190506, 2.276600, 1.000614, 0.055955, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.030375, 0.307207, 0.632789, 0.674176, 0.695898, 0.726897, 0.830705, 0.962041, 1.094201, 1.235844, 1.416117, 1.545253, 0.705493, 0.042560, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.028100, 0.311634, 0.731502, 0.825739, 0.896482, 0.969648, 1.108541, 1.268656, 1.414802, 1.553811, 1.720650, 1.820343, 0.767443, 0.047033, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.014971, 0.157799, 0.462711, 0.779549, 0.857910, 0.932256, 1.061261, 1.178198, 1.255201, 1.310401, 1.388918, 0.862372, 0.320394, 0.020471, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.036979, 0.431900, 0.979962, 1.107152, 1.201806, 1.299387, 1.482627, 1.697667, 1.897652, 2.088799, 2.316634, 2.454102, 1.112896, 0.073685, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.029025, 0.362530, 0.905506, 1.052697, 1.170136, 1.285600, 1.469755, 1.676671, 1.858427, 2.018814, 2.203459, 2.298769, 0.984018, 0.067082, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.019921, 0.212208, 0.551424, 0.574509, 0.581873, 0.597045, 0.679077, 0.777679, 0.870572, 0.968688, 1.106548, 1.179078, 0.466979, 0.034719, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.023890, 0.280071, 0.630100, 0.671956, 0.692843, 0.721376, 0.820110, 0.947255, 1.073862, 1.206391, 1.380559, 1.506587, 0.707955, 0.054282, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.020303, 0.279074, 0.705126, 0.815964, 0.902188, 0.987095, 1.127130, 1.289925, 1.435536, 1.565160, 1.719000, 1.803714, 0.817901, 0.063381, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.020309, 0.263254, 0.641989, 0.700789, 0.737320, 0.778215, 0.883579, 1.015004, 1.140577, 1.265023, 1.427571, 1.539198, 0.711205, 0.058961, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.022660, 0.336838, 0.848942, 0.979801, 1.079975, 1.178283, 1.342051, 1.535591, 1.710912, 1.867724, 2.055566, 2.161912, 1.035222, 0.087593, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.009341, 0.129130, 0.398999, 0.782069, 0.866106, 0.943600, 1.069814, 1.185157, 1.256620, 1.297799, 1.365144, 0.807904, 0.311499, 0.027762, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.082733, 0.374111, 0.447038, 0.449509, 0.463578, 0.541722, 0.691266, 0.856508, 1.027922, 1.264538, 1.383235, 0.432630, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.078050, 0.448992, 0.563849, 0.652338, 0.745780, 0.887485, 1.112200, 1.347650, 1.568649, 1.842872, 2.042398, 0.674957, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.075015, 0.427148, 0.525259, 0.598109, 0.676162, 0.802293, 1.010110, 1.231430, 1.442801, 1.709900, 1.909782, 0.657043, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.072593, 0.391101, 0.487605, 0.533554, 0.585712, 0.688936, 0.869507, 1.063695, 1.252645, 1.501382, 1.695300, 0.569478, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.021672, 0.101073, 0.230317, 0.385199, 0.537425, 0.626360, 0.716458, 0.769861, 0.637429, 0.464859, 0.255831, 0.078775, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.065722, 0.327517, 0.390952, 0.393275, 0.404436, 0.469199, 0.605467, 0.759301, 0.917279, 1.139363, 1.325189, 0.463366, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.055579, 0.248442, 0.321310, 0.292731, 0.275053, 0.312967, 0.409072, 0.518134, 0.633415, 0.810730, 0.872989, 0.297814, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.065610, 0.329787, 0.370544, 0.358303, 0.356152, 0.409969, 0.540590, 0.694279, 0.856725, 1.089619, 1.290478, 0.501912, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.064849, 0.364043, 0.441091, 0.459871, 0.485287, 0.562640, 0.723330, 0.904377, 1.085866, 1.337865, 1.546627, 0.613082, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.058151, 0.382345, 0.570705, 0.656836, 0.743962, 0.873098, 1.088538, 1.308972, 1.504870, 1.762014, 1.953066, 0.705275, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.060578, 0.355758, 0.463448, 0.485621, 0.513096, 0.591569, 0.755680, 0.937549, 1.115314, 1.366295, 1.573991, 0.626889, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.053755, 0.326351, 0.442136, 0.466602, 0.495141, 0.570027, 0.726336, 0.897834, 1.062704, 1.297144, 1.490608, 0.596944, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.029524, 0.237198, 0.653654, 0.824535, 0.991268, 1.175693, 1.422850, 1.630137, 1.764437, 1.924180, 1.426712, 0.468898, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.031111, 0.178328, 0.419522, 0.461537, 0.485876, 0.549331, 0.661707, 0.759843, 0.831871, 0.961266, 0.690188, 0.243202, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.031829, 0.196423, 0.445582, 0.478028, 0.510512, 0.579338, 0.704364, 0.818189, 0.904525, 1.049032, 0.863233, 0.307348, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.034796, 0.287130, 0.613935, 0.740991, 0.863412, 1.011066, 1.239785, 1.451270, 1.615410, 1.818674, 1.860181, 0.649832, 0.003129, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });
            VPDeq.Add(new List<double> { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.036507, 0.323151, 0.577219, 0.693705, 0.806184, 0.943193, 1.175229, 1.404776, 1.602533, 1.841236, 2.018034, 0.847697, 0.009481, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 });

            #endregion

            double[] radInterceptedMaize = { 0.020078, 0.021738, 0.041441, 0.051836, 0.067441, 0.074870, 0.083195, 0.117025, 0.153845, 0.002603, 0.053613, 0.044266, 0.143136, 0.055441, 0.194679, 0.355683, 0.258675, 0.292130, 0.470072, 0.467655, 0.571997, 0.610288, 0.660738, 0.856144, 1.061448, 1.010341, 0.844104, 1.004727, 1.864423, 2.111139, 1.867980, 1.470064, 2.433124, 3.162303, 3.888860, 4.301544, 4.882745, 5.203002, 5.024213, 6.770096, 7.652218, 8.236463, 8.488370, 5.010683, 10.719848, 11.060316, 10.460629, 13.577810, 14.217694, 14.849129, 16.384675, 8.121722, 15.745194, 18.558266, 19.526937, 18.963493, 5.165473, 19.148500, 16.516164, 20.921482, 21.562060, 20.133100, 21.297290, 21.201690, 13.143921, 11.927471, 13.566096, 17.209067, 21.117022 };

            #endregion

            #region Outputs

            double[] LER6 = { 35.676671, 40.597908, 37.123791, 35.489494, 37.360683, 37.776372, 41.596947, 39.913110, 46.120876, 42.838403, 33.774688, 30.403839, 35.574891, 35.446835, 34.848560, 32.632660, 34.972440, 39.688722, 36.092795, 34.176063, 36.130769, 36.816200, 40.266848, 38.226469, 44.900434, 39.998281, 43.657819, 48.350452, 35.935500, 34.714966, 40.206214, 46.244261, 42.991457, 43.615734, 41.188785, 40.934668, 38.165444, 41.315131, 53.290997, 42.623488, 37.273555, 41.260454, 40.180452, 45.261711, 50.708383, 43.585938, 42.378711, 42.102311, 36.000255, 40.554824, 42.554468, 45.743027, 45.365671, 36.267805, 35.793026, 38.233737, 45.978321, 38.556393, 40.115854, 39.427983, 39.515258, 39.203793, 41.605238, 39.142428, 35.907942, 44.599388, 42.022527, 38.678131, 35.838255 };

            double[] InitTT = { 28.877719, 28.877719, 28.877719, 28.877719, 28.877719, 28.877719, 34.907131, 49.613013, 64.318895, 79.024778, 93.730660, 108.436542, 123.142425, 137.848307, 152.554190, 167.260072 };

            double[] TipTT = { 35.000000, 86.000000, 137.000000, 188.000000, 239.000000, 290.000000, 341.000000, 392.000000, 443.000000, 494.000000, 545.000000, 596.000000, 647.000000, 698.000000, 749.000000, 800.000000 };

            double[] LiguleTT = {256.000000,342.000000,428.000000,514.000000,600.000000,686.000000,772.000000,858.000000,912.069920,951.113920,990.157920,1029.201920,1068.245920,1107.289920,1146.333920,1185.377920};

            double[] StartExpTT = { 35.000000, 86.000000, 137.000000, 188.000000, 239.000000, 290.000000, 326.108000, 362.216000, 398.324000, 434.432000, 470.540000, 506.648000, 542.756000, 578.864000, 614.972000, 651.080000 };

            double[] StopExpTT = { 217.000000, 297.000000, 377.000000, 457.000000, 537.000000, 617.000000, 697.000000, 777.000000, 825.069920, 858.113920, 891.157920, 924.201920, 957.245920, 990.289920, 1023.333920, 1023.333920 };

            double[] StartEnlTT = { 35.000000, 86.000000, 137.000000, 188.000000, 239.000000, 290.000000, 326.108000, 362.216000, 398.324000, 434.432000, 470.540000, 506.648000, 542.756000, 578.864000, 614.972000, 651.080000 };

            double[] StopEnlTT = { 35.000000, 86.000000, 137.000000, 188.000000, 239.000000, 290.000000, 326.108000, 362.216000, 398.324000, 434.432000, 470.540000, 506.648000, 542.756000, 578.864000, 614.972000, 651.080000 };

            #endregion

            #region Call Component

            #region Instantiation of other inputs

            //Cumulative shoot thermal time
            double cumulTTPhenoMaize = 0.0;

            bool HasNewLeafAppeared = false;

            bool isPotentialLAI = false;

            double finalLeafNumber = 0;

            double previousLeafNumber = 0.0;

            #endregion

            for (int iday = 0; iday < leafNumber.Length; iday++)
            {
                #region Calculation of other inputs for the component

                cumulTTPhenoMaize += deltaTTPhenoMaize[iday];

                finalLeafNumber = Nfinal;

                #endregion

                #region Create Leaf Layer

                if (iday - 1 >= 0) previousLeafNumber = leafNumber[iday - 1];
                else previousLeafNumber = 0.0;

                HasNewLeafAppeared = false;

                if (finalLeafNumber > 0)
                {
                    // final number of phytomer is known.
                    if (leafNumber[iday] <= finalLeafNumber)
                    {
                        bool CreateOrNot = false;
                        if (leafNumber[iday] > 0) CreateOrNot = true;

                        // a leaf Layer is growing, do nothing.
                        if (Math.Ceiling(previousLeafNumber) == Math.Ceiling(leafNumber[iday]) && (previousLeafNumber > 0)) CreateOrNot = false;

                        if (CreateOrNot)
                        {
                            //Create a leaf layer for the component
                            CreateLeafLayerLAIComponentMaize();

                            HasNewLeafAppeared = true;
                        }
                    }
                }
                else
                {
                    bool CreateOrNot = false;
                    if (leafNumber[iday] > 0) { CreateOrNot = true; }

                    // a leaf Layer is growing, do nothing.
                    if ((Math.Ceiling(previousLeafNumber) == Math.Ceiling(leafNumber[iday])) && (previousLeafNumber > 0)) CreateOrNot = false;

                    if (CreateOrNot)
                    {

                        //Create a leaf layer for the component
                        CreateLeafLayerLAIComponentMaize();

                        HasNewLeafAppeared = true;
                    }
                }
                #endregion

                #region Estimate

                maizeLaistate_.newLeafHasAppeared = HasNewLeafAppeared ? 1 : 0;
                maizeLaistate_.finalLeafNumber = finalLeafNumber;
                maizeLaistate_.leafNumber = leafNumber[iday];
                maizeLaistate_.FPAW = FPAW[iday];
                maizeLaistate_.isPotentialLAI = isPotentialLAI ? 1 : 0;
                maizeLaistate_.cumulTTPHenoMaize = cumulTTPhenoMaize;
                maizeLaistate_.deltaTTPhenoMaize = deltaTTPhenoMaize[iday];
                maizeLaistate_.VPDairCanopy = VPDairCanopy[iday];
                maizeLaistate_.TCanopyHourly = TCanopyHourly[iday].ToArray();
                maizeLaistate_.VPDeq = VPDeq[iday].ToArray();
                maizeLaistate_.previousLeafNumber = previousLeafNumber;
                maizeLaistate_.radIntercepted = radInterceptedMaize[iday];


                maizeLAI_.Estimate(maizeLaistate_, maizeLeafstate_, maizeLeafstate1_, null);

                for (int ilayer = 0; ilayer < maizeLeafstate_.State.Count; ilayer++)
                {

                    maizeLeafstate_.GAI[ilayer] = maizeLeafstate1_.exposedArea[ilayer] * plantDensity / 1000000;
                    maizeLeafstate_.length[ilayer] = maizeLeafstate1_.length[ilayer];
                    maizeLeafstate_.exposedArea[ilayer] = maizeLeafstate1_.exposedArea[ilayer];

                    maizeLeafstate_.leafAge[ilayer] = maizeLeafstate1_.leafAge[ilayer];
                    maizeLeafstate_.cumIntRad[ilayer] = maizeLeafstate1_.cumIntRad[ilayer];


                }

                #endregion

                #region Tests

                Assert.AreEqual(LER6[iday], maizeLaistate_.LER, 0.05);

                for (int ileaf = 0; ileaf < maizeLeafstate_.initialisationTT.Count; ileaf++) Assert.AreEqual(InitTT[ileaf], maizeLeafstate_.initialisationTT[ileaf], 0.05);
                Assert.IsTrue(maizeLeafstate_.initialisationTT.Count <= InitTT.Length);
                if (iday == leafNumber.Length - 1) Assert.IsTrue(maizeLeafstate_.initialisationTT.Count == InitTT.Length);
                
                for (int ileaf = 0; ileaf < maizeLeafstate_.tipTT.Count; ileaf++) Assert.AreEqual(TipTT[ileaf], maizeLeafstate_.tipTT[ileaf], 0.05);
                Assert.IsTrue(maizeLeafstate_.tipTT.Count <= TipTT.Length);
                if (iday == leafNumber.Length - 1) Assert.IsTrue(maizeLeafstate_.tipTT.Count == TipTT.Length);
                
                for (int ileaf = 0; ileaf < maizeLeafstate_.liguleTT.Count; ileaf++) Assert.AreEqual(LiguleTT[ileaf], maizeLeafstate_.liguleTT[ileaf], 0.05);
                Assert.IsTrue(maizeLeafstate_.liguleTT.Count <= StartExpTT.Length);
                if (iday == leafNumber.Length - 1) Assert.IsTrue(maizeLeafstate_.liguleTT.Count == LiguleTT.Length);

                for (int ileaf = 0; ileaf < maizeLeafstate_.startExpTT.Count; ileaf++) Assert.AreEqual(StartExpTT[ileaf], maizeLeafstate_.startExpTT[ileaf], 0.05);
                Assert.IsTrue(maizeLeafstate_.startExpTT.Count <= StartExpTT.Length);
                if (iday == leafNumber.Length - 1) Assert.IsTrue(maizeLeafstate_.startExpTT.Count == StartExpTT.Length);
                
                //for (int ileaf = 0; ileaf < maizeLeafstate_.fullyExpTT.Count; ileaf++) Assert.AreEqual(StopExpTT[ileaf], maizeLeafstate_.fullyExpTT[ileaf], 0.05);
                Assert.IsTrue(maizeLeafstate_.fullyExpTT.Count <= StopExpTT.Length);
                if (iday == leafNumber.Length - 1) Assert.IsTrue(maizeLeafstate_.fullyExpTT.Count == StopExpTT.Length);
                
                for (int ileaf = 0; ileaf < maizeLeafstate_.startEnlargeTT.Count; ileaf++) Assert.AreEqual(StartEnlTT[ileaf], maizeLeafstate_.startEnlargeTT[ileaf], 0.05);
                Assert.IsTrue(maizeLeafstate_.startEnlargeTT.Count <= StartEnlTT.Length);
                if (iday == leafNumber.Length - 1) Assert.IsTrue(maizeLeafstate_.startEnlargeTT.Count == StartEnlTT.Length);
                
                //for (int ileaf = 0; ileaf < maizeLeafstate_.stopEnlargeTT.Count; ileaf++) Assert.AreEqual(StopEnlTT[ileaf], maizeLeafstate_.stopEnlargeTT[ileaf], 0.05);
                Assert.IsTrue(maizeLeafstate_.stopEnlargeTT.Count <= StopEnlTT.Length);
                if (iday == leafNumber.Length - 1) Assert.IsTrue(maizeLeafstate_.stopEnlargeTT.Count == StopEnlTT.Length);

                #endregion
            }

            #endregion

        }

        #region Utilities

        public void CreateLeafLayerLAIComponentMaize()
        {

            maizeLeafstate_.State.Add(0);
            maizeLeafstate_.liguleTT.Add(0.0);
            maizeLeafstate_.fullyExpTT.Add(0.0);
            maizeLeafstate_.GAI.Add(0.0);
            maizeLeafstate_.length.Add(0.0);
            maizeLeafstate_.width.Add(0.0);
            maizeLeafstate_.fracPopn.Add(0.0);
            maizeLeafstate_.startExpTT.Add(0.0);
            maizeLeafstate_.baseWidth.Add(0.0);
            maizeLeafstate_.area.Add(0.0);
            maizeLeafstate_.coefLER.Add(0.0);
            maizeLeafstate_.tipTT.Add(0.0);
            maizeLeafstate_.exposedArea.Add(0.0);
            maizeLeafstate_.PreviousState.Add(0);
            maizeLeafstate_.isPrematurelyDying.Add(0);
            maizeLeafstate_.leafAge.Add(0.0);
            maizeLeafstate_.cumIntRad.Add(0.0);
            maizeLeafstate_.initialisationTT.Add(0.0);
            maizeLeafstate_.stopEnlargeTT.Add(0.0);
            maizeLeafstate_.startEnlargeTT.Add(0.0);

            maizeLeafstate1_.width.Add(0.0);
            maizeLeafstate1_.length.Add(0.0);
            maizeLeafstate1_.State.Add(0);
            maizeLeafstate1_.exposedArea.Add(0.0);
            maizeLeafstate1_.leafAge.Add(0.0);
            maizeLeafstate1_.cumIntRad.Add(0.0);

            maizeLeafstate1_.MaxAI.Add(0.0);
            maizeLeafstate1_.deltaAI.Add(0.0);
            maizeLeafstate1_.LaminaAI.Add(0.0);

            maizeLeafstate_.MaxAI.Add(0.0);
            maizeLeafstate_.deltaAI.Add(0.0);
            maizeLeafstate_.LaminaAI.Add(0.0);


        }


        #endregion

    }


}
