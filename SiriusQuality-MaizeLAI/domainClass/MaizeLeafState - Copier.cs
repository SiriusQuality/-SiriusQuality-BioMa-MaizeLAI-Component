//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file C:\Users\mancealo\Documents\DesktopBU\Sirius-BioMa-MaizePotentialLAI-Component\SiriusQuality-MaizeLAI\XML\SiriusQualityMaizeLAI_MaizeLeafState.xml
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// Loic Manceau
/// loic.manceau@inra.fr
/// INRA
/// 
/// 
/// 5/27/2019 4:53:37 PM
/// 
namespace SiriusQualityMaizeLAI
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using CRA.ModelLayer.Core;
    using CRA.ModelLayer.ParametersManagement;
    
    
    /// <summary>MaizeLeafState Domain class contains the accessors to values</summary>
    [Serializable()]
    public class MaizeLeafState : ICloneable, IDomainClass
    {
        
        #region Private fields
        private System.Collections.Generic.List<int> _State = new List<int>();
        
        private System.Collections.Generic.List<double> _liguleTT = new List<double>();
        
        private System.Collections.Generic.List<double> _fullyExpTT = new List<double>();
        
        private System.Collections.Generic.List<double> _GAI = new List<double>();
        
        private System.Collections.Generic.List<double> _length = new List<double>();
        
        private System.Collections.Generic.List<double> _width = new List<double>();
        
        private System.Collections.Generic.List<double> _fracPopn = new List<double>();
        
        private System.Collections.Generic.List<double> _startExpTT = new List<double>();
        
        private System.Collections.Generic.List<double> _baseWidth = new List<double>();
        
        private System.Collections.Generic.List<double> _area = new List<double>();
        
        private System.Collections.Generic.List<double> _coefLER = new List<double>();
        
        private System.Collections.Generic.List<double> _tipTT = new List<double>();
        
        private System.Collections.Generic.List<double> _exposedArea = new List<double>();
        
        private System.Collections.Generic.List<int> _PreviousState = new List<int>();
        
        private System.Collections.Generic.List<int> _isPrematurelyDying = new List<int>();
        
        private System.Collections.Generic.List<double> _startEnlargeTT = new List<double>();
        
        private System.Collections.Generic.List<double> _stopEnlargeTT = new List<double>();
        
        private System.Collections.Generic.List<double> _leafAge = new List<double>();
        
        private System.Collections.Generic.List<double> _cumIntRad = new List<double>();
        
        private System.Collections.Generic.List<double> _initialisationTT = new List<double>();
        
        private System.Collections.Generic.List<double> _deltaAI = new List<double>();
        
        private System.Collections.Generic.List<double> _LaminaAI = new List<double>();
        
        private System.Collections.Generic.List<double> _MaxAI = new List<double>();
        #endregion
        
        #region Private field for properties
        private ParametersIO _parametersIO;
        #endregion
        
        #region Constructor
        /// <summary>No parameters constructor</summary>
        public MaizeLeafState()
        {
            _parametersIO = new ParametersIO(this);
        }
        public MaizeLeafState(MaizeLeafState toCopy)
        {
            System.Collections.Generic.List<int> _State = new List<int>(toCopy._State);

            System.Collections.Generic.List<double> _liguleTT = new List<double>(toCopy._liguleTT);

            System.Collections.Generic.List<double> _fullyExpTT = new List<double>(toCopy._fullyExpTT);

            System.Collections.Generic.List<double> _GAI = new List<double>(toCopy._GAI);

            System.Collections.Generic.List<double> _length = new List<double>(toCopy._length);

            System.Collections.Generic.List<double> _width = new List<double>(toCopy._width);

            System.Collections.Generic.List<double> _fracPopn = new List<double>(toCopy._fracPopn);

            System.Collections.Generic.List<double> _startExpTT = new List<double>(toCopy._startExpTT);

            System.Collections.Generic.List<double> _baseWidth = new List<double>(toCopy._baseWidth);

            System.Collections.Generic.List<double> _area = new List<double>(toCopy._area);

            System.Collections.Generic.List<double> _coefLER = new List<double>(toCopy._coefLER);

            System.Collections.Generic.List<double> _tipTT = new List<double>(toCopy._tipTT);

            System.Collections.Generic.List<double> _exposedArea = new List<double>(toCopy._exposedArea);

            System.Collections.Generic.List<int> _PreviousState = new List<int>(toCopy._PreviousState);

            System.Collections.Generic.List<int> _isPrematurelyDying = new List<int>(toCopy._isPrematurelyDying);

            System.Collections.Generic.List<double> _startEnlargeTT = new List<double>(toCopy._startEnlargeTT);

            System.Collections.Generic.List<double> _stopEnlargeTT = new List<double>(toCopy._stopEnlargeTT);

            System.Collections.Generic.List<double> _leafAge = new List<double>(toCopy._leafAge);

            System.Collections.Generic.List<double> _cumIntRad = new List<double>(toCopy._cumIntRad);

            System.Collections.Generic.List<double> _initialisationTT = new List<double>(toCopy._initialisationTT);

            System.Collections.Generic.List<double> _deltaAI = new List<double>(toCopy._deltaAI);

            System.Collections.Generic.List<double> _LaminaAI = new List<double>(toCopy._LaminaAI);

            System.Collections.Generic.List<double> _MaxAI = new List<double>(toCopy._MaxAI);
        }

        #endregion
        
        #region Public properties
        /// <summary>State of the leaf, 0:Growing, 1:Mature,2:Senescing,3:Dead</summary>
        public System.Collections.Generic.List<int> State
        {
            get
            {
                return this._State;
            }
            set
            {
                this._State = value;
            }
        }
        
        /// <summary>TT at ligule appeareance</summary>
        public System.Collections.Generic.List<double> liguleTT
        {
            get
            {
                return this._liguleTT;
            }
            set
            {
                this._liguleTT = value;
            }
        }
        
        /// <summary>TT at initiation, when fully expanded (liguleTT - 50)</summary>
        public System.Collections.Generic.List<double> fullyExpTT
        {
            get
            {
                return this._fullyExpTT;
            }
            set
            {
                this._fullyExpTT = value;
            }
        }
        
        /// <summary>Green Area index (Lamina Area Index+Sheath Area Index</summary>
        public System.Collections.Generic.List<double> GAI
        {
            get
            {
                return this._GAI;
            }
            set
            {
                this._GAI = value;
            }
        }
        
        /// <summary>Leaf Length</summary>
        public System.Collections.Generic.List<double> length
        {
            get
            {
                return this._length;
            }
            set
            {
                this._length = value;
            }
        }
        
        /// <summary>Leaf width</summary>
        public System.Collections.Generic.List<double> width
        {
            get
            {
                return this._width;
            }
            set
            {
                this._width = value;
            }
        }
        
        /// <summary>fraction of Haun stage of the last leaf</summary>
        public System.Collections.Generic.List<double> fracPopn
        {
            get
            {
                return this._fracPopn;
            }
            set
            {
                this._fracPopn = value;
            }
        }
        
        /// <summary>Thermal Time at start of expansion (initTT + 100)</summary>
        public System.Collections.Generic.List<double> startExpTT
        {
            get
            {
                return this._startExpTT;
            }
            set
            {
                this._startExpTT = value;
            }
        }
        
        /// <summary>Potential Width</summary>
        public System.Collections.Generic.List<double> baseWidth
        {
            get
            {
                return this._baseWidth;
            }
            set
            {
                this._baseWidth = value;
            }
        }
        
        /// <summary>Area of the leave</summary>
        public System.Collections.Generic.List<double> area
        {
            get
            {
                return this._area;
            }
            set
            {
                this._area = value;
            }
        }
        
        /// <summary>Scaling factor from leaf 6 LER to the others r ranks</summary>
        public System.Collections.Generic.List<double> coefLER
        {
            get
            {
                return this._coefLER;
            }
            set
            {
                this._coefLER = value;
            }
        }
        
        /// <summary>Thermal Time at tip emergence</summary>
        public System.Collections.Generic.List<double> tipTT
        {
            get
            {
                return this._tipTT;
            }
            set
            {
                this._tipTT = value;
            }
        }
        
        /// <summary>Exposed area of the leaf</summary>
        public System.Collections.Generic.List<double> exposedArea
        {
            get
            {
                return this._exposedArea;
            }
            set
            {
                this._exposedArea = value;
            }
        }
        
        /// <summary>Previous State of the leaf, 0:Growing, 1:Mature,2:Senescing,3:Dead</summary>
        public System.Collections.Generic.List<int> PreviousState
        {
            get
            {
                return this._PreviousState;
            }
            set
            {
                this._PreviousState = value;
            }
        }
        
        /// <summary>Flag</summary>
        public System.Collections.Generic.List<int> isPrematurelyDying
        {
            get
            {
                return this._isPrematurelyDying;
            }
            set
            {
                this._isPrematurelyDying = value;
            }
        }
        
        /// <summary>Begining of leaf width extension</summary>
        public System.Collections.Generic.List<double> startEnlargeTT
        {
            get
            {
                return this._startEnlargeTT;
            }
            set
            {
                this._startEnlargeTT = value;
            }
        }
        
        /// <summary>Stop of Leaf width expension</summary>
        public System.Collections.Generic.List<double> stopEnlargeTT
        {
            get
            {
                return this._stopEnlargeTT;
            }
            set
            {
                this._stopEnlargeTT = value;
            }
        }
        
        /// <summary>Leaf age</summary>
        public System.Collections.Generic.List<double> leafAge
        {
            get
            {
                return this._leafAge;
            }
            set
            {
                this._leafAge = value;
            }
        }
        
        /// <summary>Cumulated Intercepted Radiations</summary>
        public System.Collections.Generic.List<double> cumIntRad
        {
            get
            {
                return this._cumIntRad;
            }
            set
            {
                this._cumIntRad = value;
            }
        }
        
        /// <summary>Thermal Time At Initialisation</summary>
        public System.Collections.Generic.List<double> initialisationTT
        {
            get
            {
                return this._initialisationTT;
            }
            set
            {
                this._initialisationTT = value;
            }
        }
        
        /// <summary>Increment in aera index of the day</summary>
        public System.Collections.Generic.List<double> deltaAI
        {
            get
            {
                return this._deltaAI;
            }
            set
            {
                this._deltaAI = value;
            }
        }
        
        /// <summary>Leaf lamina Area Index</summary>
        public System.Collections.Generic.List<double> LaminaAI
        {
            get
            {
                return this._LaminaAI;
            }
            set
            {
                this._LaminaAI = value;
            }
        }
        
        /// <summary>Leaf maximum area index over the season</summary>
        public System.Collections.Generic.List<double> MaxAI
        {
            get
            {
                return this._MaxAI;
            }
            set
            {
                this._MaxAI = value;
            }
        }
        #endregion
        
        #region IDomainClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "States for a leaf of maize";
            }
        }
        
        /// <summary>Domain Class URL</summary>
        public virtual  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Domain Class Properties</summary>
        public virtual IDictionary<string, PropertyInfo> PropertiesDescription
        {
            get
            {
                return _parametersIO.GetCachedProperties(typeof(IDomainClass));
            }
        }
        #endregion
        
        /// <summary>Clears the values of the properties of the domain class by using the default value for the type of each property (e.g '0' for numbers, 'the empty string' for strings, etc.)</summary>
        public virtual Boolean ClearValues()
        {
            _State = new List<int>();
            _liguleTT = new List<double>();
            _fullyExpTT = new List<double>();
            _GAI = new List<double>();
            _length = new List<double>();
            _width = new List<double>();
            _fracPopn = new List<double>();
            _startExpTT = new List<double>();
            _baseWidth = new List<double>();
            _area = new List<double>();
            _coefLER = new List<double>();
            _tipTT = new List<double>();
            _exposedArea = new List<double>();
            _PreviousState = new List<int>();
            _isPrematurelyDying = new List<int>();
            _startEnlargeTT = new List<double>();
            _stopEnlargeTT = new List<double>();
            _leafAge = new List<double>();
            _cumIntRad = new List<double>();
            _initialisationTT = new List<double>();
            _deltaAI = new List<double>();
            _LaminaAI = new List<double>();
            _MaxAI = new List<double>();
            // Returns true if everything is ok
            return true;
        }
        
        #region Clone
        /// <summary>Implement ICloneable.Clone()</summary>
        public virtual Object Clone()
        {
            // Shallow copy by default
            IDomainClass myclass = (IDomainClass) this.MemberwiseClone();
            _parametersIO.PopulateClonedCopy(myclass);
            return myclass;
        }
        #endregion
    }
}
