//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file C:\Users\mancealo\Documents\GitSiriusCode\Sirius-BioMa-MaizePotentialLAI-Component\SiriusQuality-MaizeLAI\XML\SiriusQualityMaizeLAI_MaizeLAIState.xml
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// Loic Manceau
/// loic.manceau@inra.fr
/// INRA
/// 
/// 
/// 7/2/2019 9:35:22 AM
/// 
namespace SiriusQualityMaizeLAI
{
    using System;
    using CRA.ModelLayer.Core;
    
    
    /// <summary>MaizeLAIStateVarInfoClasses contain the attributes for each variable in the domain class RainData. Attributes are valorized via the static constructor. The data-type VarInfo causes  a dependency to the assembly CRA.Core.Preconditions.dll</summary>
    public class MaizeLAIStateVarInfo : IVarInfoClass
    {
        
        #region Private fields
        static VarInfo _newLeafHasAppeared = new VarInfo();
        
        static VarInfo _leafNumber = new VarInfo();
        
        static VarInfo _finalLeafNumber = new VarInfo();
        
        static VarInfo _FPAW = new VarInfo();
        
        static VarInfo _VPDairCanopy = new VarInfo();
        
        static VarInfo _WaterLimitedPotDeltaAIList = new VarInfo();
        
        static VarInfo _potentialIncDeltaArea = new VarInfo();
        
        static VarInfo _TCanopyHourly = new VarInfo();
        
        static VarInfo _VPDeq = new VarInfo();
        
        static VarInfo _hLER = new VarInfo();
        
        static VarInfo _LER = new VarInfo();
        
        static VarInfo _cumulTTPHenoMaize = new VarInfo();
        
        static VarInfo _deltaTTPhenoMaize = new VarInfo();
        
        static VarInfo _previousLeafNumber = new VarInfo();
        
        static VarInfo _radIntercepted = new VarInfo();
        
        static VarInfo _IncDeltaArea = new VarInfo();
        
        static VarInfo _availableN = new VarInfo();
        #endregion
        
        /// <summary>Constructor</summary>
        static MaizeLAIStateVarInfo()
        {
            MaizeLAIStateVarInfo.DescribeVariables();
        }
        
        #region IVarInfoClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "Domain class description";
            }
        }
        
        /// <summary>Reference to the ontology</summary>
        public  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Value domain class of reference</summary>
        public  string DomainClassOfReference
        {
            get
            {
                return "MaizeLAIState";
            }
        }
        #endregion
        
        #region Public properties
        /// <summary></summary>
        public static  VarInfo newLeafHasAppeared
        {
            get
            {
                return  _newLeafHasAppeared;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo leafNumber
        {
            get
            {
                return  _leafNumber;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo finalLeafNumber
        {
            get
            {
                return  _finalLeafNumber;
            }
        }
        
        /// <summary>Fraction of plant available water</summary>
        public static  VarInfo FPAW
        {
            get
            {
                return  _FPAW;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo VPDairCanopy
        {
            get
            {
                return  _VPDairCanopy;
            }
        }
        
        /// <summary>list on each phytomer</summary>
        public static  VarInfo WaterLimitedPotDeltaAIList
        {
            get
            {
                return  _WaterLimitedPotDeltaAIList;
            }
        }
        
        /// <summary> </summary>
        public static  VarInfo potentialIncDeltaArea
        {
            get
            {
                return  _potentialIncDeltaArea;
            }
        }
        
        /// <summary></summary>
        public static  VarInfo TCanopyHourly
        {
            get
            {
                return  _TCanopyHourly;
            }
        }
        
        /// <summary></summary>
        public static  VarInfo VPDeq
        {
            get
            {
                return  _VPDeq;
            }
        }
        
        /// <summary> Hourly Leaf elongation rate of the sixth leaf</summary>
        public static  VarInfo hLER
        {
            get
            {
                return  _hLER;
            }
        }
        
        /// <summary>Mean daily Elongation rate of the sixth leaf</summary>
        public static  VarInfo LER
        {
            get
            {
                return  _LER;
            }
        }
        
        /// <summary></summary>
        public static  VarInfo cumulTTPHenoMaize
        {
            get
            {
                return  _cumulTTPHenoMaize;
            }
        }
        
        /// <summary></summary>
        public static  VarInfo deltaTTPhenoMaize
        {
            get
            {
                return  _deltaTTPhenoMaize;
            }
        }
        
        /// <summary>Previous time step leaf number</summary>
        public static  VarInfo previousLeafNumber
        {
            get
            {
                return  _previousLeafNumber;
            }
        }
        
        /// <summary>Total Radiation Intercepted by shoot</summary>
        public static  VarInfo radIntercepted
        {
            get
            {
                return  _radIntercepted;
            }
        }
        
        /// <summary>Increment in Area Index under drought and Nitrogen stress</summary>
        public static  VarInfo IncDeltaArea
        {
            get
            {
                return  _IncDeltaArea;
            }
        }
        
        /// <summary>Available Nitrogen</summary>
        public static  VarInfo availableN
        {
            get
            {
                return  _availableN;
            }
        }
        #endregion
        
        #region VarInfo values
        /// <summary>Set VarInfo values</summary>
        static void DescribeVariables()
        {
            //   
            _newLeafHasAppeared.Name = "newLeafHasAppeared";
            _newLeafHasAppeared.Description = "";
            _newLeafHasAppeared.MaxValue = 1D;
            _newLeafHasAppeared.MinValue = 0D;
            _newLeafHasAppeared.DefaultValue = 0D;
            _newLeafHasAppeared.Units = "NA";
            _newLeafHasAppeared.URL = "http://";
            _newLeafHasAppeared.ValueType = VarInfoValueTypes.GetInstanceForName("Integer");
            //   
            _leafNumber.Name = "leafNumber";
            _leafNumber.Description = " ";
            _leafNumber.MaxValue = 20D;
            _leafNumber.MinValue = 0D;
            _leafNumber.DefaultValue = 0D;
            _leafNumber.Units = "leaf";
            _leafNumber.URL = "http://";
            _leafNumber.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _finalLeafNumber.Name = "finalLeafNumber";
            _finalLeafNumber.Description = " ";
            _finalLeafNumber.MaxValue = 20D;
            _finalLeafNumber.MinValue = 0D;
            _finalLeafNumber.DefaultValue = 10D;
            _finalLeafNumber.Units = "leaf";
            _finalLeafNumber.URL = "http://";
            _finalLeafNumber.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _FPAW.Name = "FPAW";
            _FPAW.Description = "Fraction of plant available water";
            _FPAW.MaxValue = 1D;
            _FPAW.MinValue = 0D;
            _FPAW.DefaultValue = 0.5D;
            _FPAW.Units = "dimensionless";
            _FPAW.URL = "http://";
            _FPAW.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _VPDairCanopy.Name = "VPDairCanopy";
            _VPDairCanopy.Description = " ";
            _VPDairCanopy.MaxValue = 100D;
            _VPDairCanopy.MinValue = 0D;
            _VPDairCanopy.DefaultValue = 0D;
            _VPDairCanopy.Units = " ";
            _VPDairCanopy.URL = "http://";
            _VPDairCanopy.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _WaterLimitedPotDeltaAIList.Name = "WaterLimitedPotDeltaAIList";
            _WaterLimitedPotDeltaAIList.Description = "list on each phytomer";
            _WaterLimitedPotDeltaAIList.MaxValue = 0D;
            _WaterLimitedPotDeltaAIList.MinValue = 0D;
            _WaterLimitedPotDeltaAIList.DefaultValue = 0D;
            _WaterLimitedPotDeltaAIList.Units = " ";
            _WaterLimitedPotDeltaAIList.URL = "http://";
            _WaterLimitedPotDeltaAIList.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _potentialIncDeltaArea.Name = "potentialIncDeltaArea";
            _potentialIncDeltaArea.Description = " ";
            _potentialIncDeltaArea.MaxValue = 10D;
            _potentialIncDeltaArea.MinValue = 0D;
            _potentialIncDeltaArea.DefaultValue = 0D;
            _potentialIncDeltaArea.Units = " ";
            _potentialIncDeltaArea.URL = "http://";
            _potentialIncDeltaArea.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _TCanopyHourly.Name = "TCanopyHourly";
            _TCanopyHourly.Description = "";
            _TCanopyHourly.MaxValue = 0D;
            _TCanopyHourly.MinValue = 0D;
            _TCanopyHourly.DefaultValue = 0D;
            _TCanopyHourly.Units = "°C/d";
            _TCanopyHourly.URL = "http://";
            _TCanopyHourly.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _VPDeq.Name = "VPDeq";
            _VPDeq.Description = "";
            _VPDeq.MaxValue = 0D;
            _VPDeq.MinValue = 0D;
            _VPDeq.DefaultValue = 0D;
            _VPDeq.Units = "hPa";
            _VPDeq.URL = "http://";
            _VPDeq.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _hLER.Name = "hLER";
            _hLER.Description = " Hourly Leaf elongation rate of the sixth leaf";
            _hLER.MaxValue = 0D;
            _hLER.MinValue = 0D;
            _hLER.DefaultValue = 0D;
            _hLER.Units = " ";
            _hLER.URL = "http://";
            _hLER.ValueType = VarInfoValueTypes.GetInstanceForName("ArrayDouble");
            //   
            _LER.Name = "LER";
            _LER.Description = "Mean daily Elongation rate of the sixth leaf";
            _LER.MaxValue = 0D;
            _LER.MinValue = 0D;
            _LER.DefaultValue = 0D;
            _LER.Units = " ";
            _LER.URL = "http://";
            _LER.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _cumulTTPHenoMaize.Name = "cumulTTPHenoMaize";
            _cumulTTPHenoMaize.Description = "";
            _cumulTTPHenoMaize.MaxValue = 10000D;
            _cumulTTPHenoMaize.MinValue = 0D;
            _cumulTTPHenoMaize.DefaultValue = 0D;
            _cumulTTPHenoMaize.Units = "°C/d";
            _cumulTTPHenoMaize.URL = "http://";
            _cumulTTPHenoMaize.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _deltaTTPhenoMaize.Name = "deltaTTPhenoMaize";
            _deltaTTPhenoMaize.Description = "";
            _deltaTTPhenoMaize.MaxValue = 50D;
            _deltaTTPhenoMaize.MinValue = 0D;
            _deltaTTPhenoMaize.DefaultValue = 10D;
            _deltaTTPhenoMaize.Units = "°C/d";
            _deltaTTPhenoMaize.URL = "http://";
            _deltaTTPhenoMaize.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _previousLeafNumber.Name = "previousLeafNumber";
            _previousLeafNumber.Description = "Previous time step leaf number";
            _previousLeafNumber.MaxValue = 20D;
            _previousLeafNumber.MinValue = 0D;
            _previousLeafNumber.DefaultValue = 0D;
            _previousLeafNumber.Units = "leaf";
            _previousLeafNumber.URL = "http://";
            _previousLeafNumber.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _radIntercepted.Name = "radIntercepted";
            _radIntercepted.Description = "Total Radiation Intercepted by shoot";
            _radIntercepted.MaxValue = 1D;
            _radIntercepted.MinValue = 0D;
            _radIntercepted.DefaultValue = 0D;
            _radIntercepted.Units = "MJ m-2";
            _radIntercepted.URL = "http://";
            _radIntercepted.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _IncDeltaArea.Name = "IncDeltaArea";
            _IncDeltaArea.Description = "Increment in Area Index under drought and Nitrogen stress";
            _IncDeltaArea.MaxValue = 1D;
            _IncDeltaArea.MinValue = 0D;
            _IncDeltaArea.DefaultValue = 0D;
            _IncDeltaArea.Units = "m²/m²";
            _IncDeltaArea.URL = "http://";
            _IncDeltaArea.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
            //   
            _availableN.Name = "availableN";
            _availableN.Description = "Available Nitrogen";
            _availableN.MaxValue = 1000D;
            _availableN.MinValue = 0D;
            _availableN.DefaultValue = 0D;
            _availableN.Units = "g(N)/m²(leaf)";
            _availableN.URL = "http://";
            _availableN.ValueType = VarInfoValueTypes.GetInstanceForName("Double");
        }
        #endregion
    }
}
